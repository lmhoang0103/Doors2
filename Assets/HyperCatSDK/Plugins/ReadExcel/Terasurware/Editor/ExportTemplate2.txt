using System;
using System.Linq;
using UnityEngine;
using System.Collections;
using System.IO;
using UnityEditor;
using System.Xml.Serialization;
using NPOI.HSSF.UserModel;
using NPOI.XSSF.UserModel;
using NPOI.SS.UserModel;

public class $ExportTemplate$ : AssetPostprocessor
{
    private static readonly string filePath = "$IMPORT_PATH$";
    private static readonly string[] sheetNames = { $SheetList$ };
    
    static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
    {
        foreach (string asset in importedAssets)
        {
            if (!filePath.Equals(asset))
                continue;

            using (FileStream stream = File.Open (filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
				IWorkbook book = null;
				if (Path.GetExtension (filePath) == ".xls") {
					book = new HSSFWorkbook(stream);
				} else {
					book = new XSSFWorkbook(stream);
				}

                foreach (string sheetName in sheetNames)
                {
                  
         

					// check sheet
                    var sheet = book.GetSheet(sheetName);
                    if (sheet == null)
                    {
                        Debug.LogError("[QuestData] sheet not found:" + sheetName);
                        continue;
                    }
				
                	// add infomation
                    for (int i=1; i<= sheet.GetSheetLength(); i++)
                    {
					 IRow row = sheet.GetRow(i);
                     ICell cell = null;
				     cell = row.GetCell(1);
					 string _name=  cell.ToString();
					 if(    string.IsNullOrEmpty(_name))
					 {
					 _name=sheetName+i;
					 }
					 var exportPath = "$ExportAssetDirectry$/" + _name+ ".asset";
                     if (!Directory.Exists("$ExportAssetDirectry$/"))
        {
            Directory.CreateDirectory("$ExportAssetDirectry$/");
        }
                    // check scriptable object
                    var data = ($ExcelData$)AssetDatabase.LoadAssetAtPath(exportPath, typeof($ExcelData$));
                    if (data == null)
                    {
                        data = ScriptableObject.CreateInstance<$ExcelData$>();
                        AssetDatabase.CreateAsset((ScriptableObject)data, exportPath);
                         
                    }

                       data.hideFlags = HideFlags.None;
                        
                      //  var p = new $ExcelData$();
					   var p = data;
			$EXPORT_DATA$

                     //   data=p;
						// save scriptable object
                    ScriptableObject obj = AssetDatabase.LoadAssetAtPath(exportPath, typeof(ScriptableObject)) as ScriptableObject;
                    EditorUtility.SetDirty(obj);
                    }
                    
                    
                }
            }

        }
    }
}
